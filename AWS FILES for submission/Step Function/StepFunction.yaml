Transform: AWS::Serverless-2016-10-31
Resources:
  StateMachined438aadd:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: >-
          A Hello World example that demonstrates various state types in the
          Amazon States Language, and showcases data flow and transformations
          using variables and JSONata expressions. This example consists solely
          of flow control states, so no additional resources are needed to run
          it.
        QueryLanguage: JSONata
        StartAt: String2JSON
        States:
          String2JSON:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: ${lambdainvoke_FunctionName_04ec1d71}
              Payload: '{% $states.input %}'
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Pass (1)
          Pass (1):
            Type: Pass
            Next: fetch_admins
            Assign:
              message: '{% $states.input.message %}'
              subject: '{% $states.input.subject %}'
          fetch_admins:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: ${lambdainvoke_FunctionName_cfb600c4}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Map
          Map:
            Type: Map
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: Pass
              States:
                Pass:
                  Type: Pass
                  Next: Lambda Invoke
                  Output:
                    subject: '{% $subject %}'
                    message: '{% $message %}'
                    recipient: '{% $states.input.email %}'
                Lambda Invoke:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  Output: '{% $states.result.Payload %}'
                  Arguments:
                    FunctionName: ${lambdainvoke_FunctionName_58938023}
                    Payload: '{% $states.input %}'
                  Retry:
                    - ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                        - Lambda.TooManyRequestsException
                      IntervalSeconds: 1
                      MaxAttempts: 3
                      BackoffRate: 2
                      JitterStrategy: FULL
                  End: true
            End: true
      DefinitionSubstitutions:
        lambdainvoke_FunctionName_04ec1d71: arn:aws:lambda:us-east-2:979182475859:function:string_to_json:$LATEST
        lambdainvoke_FunctionName_cfb600c4: >-
          arn:aws:lambda:us-east-2:979182475859:function:fetchAdminsInternal:$LATEST
        lambdainvoke_FunctionName_58938023: >-
          arn:aws:lambda:us-east-2:979182475859:function:sendGenericEmail:$LATEST
      Name: StateMachined438aadd
      Type: STANDARD
      Role:
        Fn::GetAtt:
          - Role64eb78f2
          - Arn
      Logging:
        Level: 'OFF'
        IncludeExecutionData: false
  Role64eb78f2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StepFunctions_IAM_ROLE_HelloWorldStateMachine0a660ecd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
  Policy0c9878a0:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: XRayAccessPolicy4e970788
      RoleName:
        Ref: Role64eb78f2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
            Resource:
              - '*'
  Policyfb03d191:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: lambda_invoke_lambda04c9ff9b
      RoleName:
        Ref: Role64eb78f2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:CreateFunctionUrlConfig
              - lambda:UpdateFunctionCode
              - lambda:InvokeFunctionUrl
              - lambda:ListFunctions
              - lambda:InvokeFunction
              - lambda:InvokeAsync
              - lambda:DeleteFunction
            Resource: '*'
